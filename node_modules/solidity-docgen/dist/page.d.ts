import { VFile } from './vfile';
import { Sitemap, Link } from './sitemap';
import { SourceContract } from './source';
declare type Template<T> = (data: T) => string;
declare type PreludeTemplate = Template<{
    links: Link[];
}>;
export declare abstract class Page {
    private readonly sitemap;
    abstract path: string;
    abstract contracts: SourceContract[];
    abstract contents: string;
    constructor(sitemap: Sitemap);
    render(preludeTemplate: PreludeTemplate): string;
}
export declare class DefaultPage extends Page {
    private readonly ext;
    readonly contracts: SourceContract[];
    constructor(sitemap: Sitemap, ext: string, contracts: SourceContract[]);
    get contents(): string;
    get path(): string;
}
export declare class ReadmePage extends Page {
    private readonly readme;
    readonly contracts: SourceContract[];
    constructor(sitemap: Sitemap, readme: VFile, contracts: SourceContract[]);
    get contents(): string;
    get template(): (page: Page) => string;
    get location(): string;
    get path(): string;
}
export declare class ContractPage extends Page {
    private readonly contract;
    private readonly ext;
    constructor(sitemap: Sitemap, contract: SourceContract, ext: string);
    get contents(): string;
    get contracts(): SourceContract[];
    get path(): string;
}
export {};
//# sourceMappingURL=page.d.ts.map